{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AACA,2BAAiBA,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA;;;;;;;;;;;;;;;AAeA;;AAEAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAKC,GAAL,KAAa;AACnCC,IAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8CC,UAAU;AACvD,QAAMC,WAAW,EAACC,aAAaF,OAAOG,MAArB,EAAjB;AACAT,MAAIH,IAAJ,CAAS,EAACa,WAAUH,QAAX,EAAqBI,SAASL,MAA9B,EAAT;AACA,EAHD,EAGGM,KAHH,CAGSC,SAAS;AACjBC,UAAQC,GAAR,CAAYF,KAAZ;AACAb,MAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,0BAAyBJ,KAAM,EAA1C,EAArB;AACA,EAND;AAOA,CARD;;AAUAnB,IAAIwB,IAAJ,CAAS,aAAT,EAAwB,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACrC,OAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,UAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,KAAG,CAACH,SAASH,MAAb,EAAqB;AACpBG,WAASH,MAAT,GAAkB,KAAlB;AACA;;AAED,OAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,KAAII,GAAJ,EAAS;AACRvB,MAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,oBAAmBM,GAAI,EAAlC,EAArB;AACA;AACA;;AAEDtB,IAAGC,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCN,QAAlC,EAA4Cd,IAA5C,CAAiDqB,UAChDzB,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAACwB,KAAKD,OAAOE,UAAb,EAA7B,EAAuDC,KAAvD,CAA6D,CAA7D,EAAgEC,IAAhE,EADD,CACwE;AACnD;AAFrB,GAGEzB,IAHF,CAGOc,YAAY;AAClBnB,MAAIH,IAAJ,CAASsB,QAAT;AACA,EALD,EAKGP,KALH,CAKSC,SAAS;AACjBC,UAAQC,GAAR,CAAYF,KAAZ;AACAb,MAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAACoB,SAAU,0BAAyBJ,KAAM,EAA1C,EAArB;AACA,EARD;AAUA,CAvBD;;AAyBA,IAAIZ,EAAJ;AACA,qBAAY8B,OAAZ,CAAoB,kCAApB,EAAwD1B,IAAxD,CAA6D2B,cAAc;AAC1E/B,MAAK+B,UAAL;AACAtC,KAAIuC,MAAJ,CAAW,IAAX,EAAiB,YAAW;AACzBnB,UAAQC,GAAR,CAAY,0BAAZ;AACF,EAFD;AAGA,CALD,EAKGH,KALH,CAKSC,SAAS;AACjBC,SAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,CAPD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport {MongoClient} from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\n/*if(process.env.NODE_ENV !== 'production') {\n\tconst webpack = require('webpack');\n\tconst webpackDevMiddleware = require('webpack-dev-middleware');\n\tconst webpackHotMiddleware = require('webpack-hot-middleware');\n\n\tconst config = require('../webpack.config');\n\tconfig.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n\tconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n\tconst bundler = webpack(config);\n\tapp.use(webpackDevMiddleware(bundler, {noInfo: true}));\n\tapp.use(webpackHotMiddleware(bundler,{log:console.log}));\n} --> This was to install HMRs inline with express server code. It has it's pros and cons. I like it,\n----> but for book we will maintain web-dev-server separate from express server.*/\n\n//throw new Error('Test!');\n\napp.get('/api/issues', (req,res) => {\n\tdb.collection('issues').find().toArray().then(issues => {\n\t\tconst metadata = {total_count: issues.length};\n\t\tres.json({_metadata:metadata, records: issues});\t\t\n\t}).catch(error => {\n\t\tconsole.log(error);\n\t\tres.status(500).json({message: `Internal server error: ${error}`});\n\t});\n});\n\napp.post('/api/issues', (req, res) => {\n\tconst newIssue = req.body;\n\tnewIssue.created = new Date();\n\tif(!newIssue.status) {\n\t\tnewIssue.status = 'New';\n\t}\n\n\tconst err = Issue.validateIssue(newIssue);\n\tif (err) {\n\t\tres.status(422).json({message: `Invalid request: ${err}`});\n\t\treturn;\n\t}\n\n\tdb.collection('issues').insertOne(newIssue).then(result =>\n\t\tdb.collection('issues').find({_id: result.insertedId}).limit(1).next() //I tried using brackets here and to no avail...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   //just want to be consistent here what is the catch?\t\n\t).then(newIssue => {\n\t\tres.json(newIssue);\n\t}).catch(error => {\n\t\tconsole.log(error);\n\t\tres.status(500).json({message: `Internal server error: ${error}`});\n\t});\n\n});\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n\tdb = connection;\n\tapp.listen(3000, function() {\n  \t\tconsole.log('App started on port 3000');\n\t});\n}).catch(error => {\n\tconsole.log('ERROR:', error);\n});\n\n\n\n"]}