{"version":3,"sources":["../server/server.js"],"names":["install","db","app","use","static","json","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AACA,2BAAiBA,OAAjB;;AAEA,IAAIC,EAAJ;AACA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;AAEAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCP,KAAGQ,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GACCC,IADD,CACMC,UAAU;AACd,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAR,QAAIH,IAAJ,CAAS,EAAEY,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAJD,EAKCM,KALD,CAKOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CAAqB,EAAEmB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GARD;AASD,CAVD;;AAYAlB,IAAIuB,IAAJ,CAAS,aAAT,EAAwB,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMkB,WAAWnB,IAAIoB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EAAsB;AACpBG,aAASH,MAAT,GAAkB,KAAlB;AACD;;AAED,QAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPtB,QAAIe,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CAAqB,EAAEmB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAED;;;;;;AAQA7B,KAAGQ,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCN,QAAlC,EAA4Cd,IAA5C,CAAiDqB,UAC/ChC,GAAGQ,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEwB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACCC,IADD,EADF,EAICzB,IAJD,CAIMc,YAAY;AAChBlB,QAAIH,IAAJ,CAASqB,QAAT;AACD,GAND,EAOCP,KAPD,CAOOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CAAqB,EAAEmB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAVD;AAWD,CAhCD;;AAkCA,qBAAYkB,OAAZ,CAAoB,kCAApB,EACC1B,IADD,CACM2B,cAAc;AAClBtC,OAAKsC,UAAL;AACArC,MAAIsC,MAAJ,CAAW,IAAX,EAAiB,YAAW;AAC1BnB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CAND,EAOCH,KAPD,CAOOC,SAAS;AACdC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CATD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nlet db;\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\n\n/* This was to install HMRs inline with express server code. It has it's pros and cons. I like it,\n   but for book we will maintain web-dev-server separate from express server.\n\n  if(process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, {noInfo: true}));\n    app.use(webpackHotMiddleware(bundler,{log:console.log}));\n} */\n\n// throw new Error('Test!');\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray()\n  .then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal server error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  /* I tried using brackets here and to no avail like so...\n\n  db.collection('issues').insertOne(newIssue).then(result => {\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  })\n\n    Just want to be consistent here what is the catch? */\n\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1)\n    .next()\n  )\n  .then(newIssue => {\n    res.json(newIssue);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal server error: ${error}` });\n  });\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker')\n.then(connection => {\n  db = connection;\n  app.listen(3000, function() {\n    console.log('App started on port 3000');\n  });\n})\n.catch(error => {\n  console.log('ERROR:', error);\n});\n"]}