{"version":3,"sources":["../server/issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","cleanUpIssue","issue","cleanedUpIssue","Object","keys","forEach","field","validateIssue","errors","console","log","push","length","join"],"mappings":";;;;;AAAA,MAAMA,mBAAmB;AACvBC,OAAK,IADkB;AAEvBC,QAAM,IAFiB;AAGvBC,YAAU,IAHa;AAIvBC,SAAO,IAJgB;AAKvBC,YAAU,IALa;AAMvBC,UAAQ;AANe,CAAzB;;AASA,MAAMC,iBAAiB;AACrBC,UAAQ,UADa;AAErBC,SAAO,UAFc;AAGrBC,UAAQ,UAHa;AAIrBC,WAAS,UAJY;AAKrBC,kBAAgB,UALK;AAMrBC,SAAO;AANc,CAAvB;;AASA;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,iBAAiB,EAAvB;AACAC,SAAOC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2BC,SAAS;AAClC,QAAIb,eAAea,KAAf,CAAJ,EAA2B;AACzBJ,qBAAeI,KAAf,IAAwBL,MAAMK,KAAN,CAAxB;AACD;AACF,GAJD;;AAMA,SAAOJ,cAAP;AACD;;AAED,SAASK,aAAT,CAAuBN,KAAvB,EAA8B;AAC5B,QAAMO,SAAS,EAAf;AACAL,SAAOC,IAAP,CAAYX,cAAZ,EAA4BY,OAA5B,CAAoCC,SAAS;AACzC;AACHG,YAAQC,GAAR,CAAY,YAAYJ,KAAZ,GAAoB,GAApB,GAA0B,SAA1B,GAAsCL,MAAMK,KAAN,CAAlD;AACC,QAAIb,mBAAmB,UAAnB,IAAiC,CAACQ,MAAMK,KAAN,CAAtC,EAAoD;AAClDE,aAAOG,IAAP,CAAa,2BAA0BL,KAAM,EAA7C;AACAG,cAAQC,GAAR,CAAY,sBAAZ;AACD;AACF,GAPD;;AASA,MAAI,CAACxB,iBAAiBe,MAAMP,MAAvB,CAAL,EAAqC;AACnCc,WAAOG,IAAP,CAAa,GAAEV,MAAMP,MAAO,yBAA5B;AACD;;AAED,SAAQc,OAAOI,MAAP,GAAgBJ,OAAOK,IAAP,CAAY,IAAZ,CAAhB,GAAoC,IAA5C;AACD;;kBAEc;AACbN,iBAAeA,aADF;AAEbP,gBAAcA;AAFD,C","file":"issue.js","sourcesContent":["const validIssueStatus = {\n  New: true,\n  Open: true,\n  Assigned: true,\n  Fixed: true,\n  Verified: true,\n  Closed: true,\n};\n\nconst issueFieldType = {\n  status: 'required',\n  owner: 'required',\n  effort: 'optional',\n  created: 'required',\n  completionDate: 'optional',\n  title: 'required',\n};\n\n// we'll see what the point of this 'cleanup' is\nfunction cleanUpIssue(issue) {\n  const cleanedUpIssue = {};\n  Object.keys(issue).forEach(field => {\n    if (issueFieldType[field]) {\n      cleanedUpIssue[field] = issue[field];\n    }\n  });\n\n  return cleanedUpIssue;\n}\n\nfunction validateIssue(issue) {\n  const errors = [];\n  Object.keys(issueFieldType).forEach(field => {\n      //errors.push(`Missing mandatory field ${field}`);\n  \tconsole.log(\"field: \" + field + \" \" + \"issue: \" + issue[field]);\n    if (issueFieldType === 'required' && !issue[field]) {\n      errors.push(`Missing mandatory field ${field}`);\n      console.log(\"Something happening?\")\n    }\n  });\n\n  if (!validIssueStatus[issue.status]) {\n    errors.push(`${issue.status} is not a valid status.`);\n  }\n\n  return (errors.length ? errors.join('; ') : null);\n}\n\nexport default {\n  validateIssue: validateIssue,\n  cleanUpIssue: cleanUpIssue,\n};\n"]}